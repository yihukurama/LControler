package com.yihukurama.lcontroler.model.access.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yihukurama.lcontroler.model.access.greendao.LoveMemory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOVE_MEMORY.
*/
public class LoveMemoryDao extends AbstractDao<LoveMemory, String> {

    public static final String TABLENAME = "LOVE_MEMORY";

    /**
     * Properties of entity LoveMemory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Message = new Property(2, String.class, "message", false, "MESSAGE");
        public final static Property Birthyear = new Property(3, String.class, "birthyear", false, "BIRTHYEAR");
        public final static Property Birthmonth = new Property(4, String.class, "birthmonth", false, "BIRTHMONTH");
        public final static Property Birthday = new Property(5, String.class, "birthday", false, "BIRTHDAY");
    };


    public LoveMemoryDao(DaoConfig config) {
        super(config);
    }
    
    public LoveMemoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOVE_MEMORY' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'DESCRIPTION' TEXT," + // 1: description
                "'MESSAGE' TEXT," + // 2: message
                "'BIRTHYEAR' TEXT," + // 3: birthyear
                "'BIRTHMONTH' TEXT," + // 4: birthmonth
                "'BIRTHDAY' TEXT);"); // 5: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOVE_MEMORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoveMemory entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(3, message);
        }
 
        String birthyear = entity.getBirthyear();
        if (birthyear != null) {
            stmt.bindString(4, birthyear);
        }
 
        String birthmonth = entity.getBirthmonth();
        if (birthmonth != null) {
            stmt.bindString(5, birthmonth);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(6, birthday);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoveMemory readEntity(Cursor cursor, int offset) {
        LoveMemory entity = new LoveMemory( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // message
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // birthyear
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthmonth
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // birthday
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoveMemory entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBirthyear(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthmonth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LoveMemory entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LoveMemory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
